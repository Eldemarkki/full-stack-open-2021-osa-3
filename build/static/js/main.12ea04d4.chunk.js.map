{"version":3,"sources":["services/contacts.js","App.js","index.js"],"names":["baseUrl","contactService","getAll","axios","get","then","response","data","add","contact","post","deleteContact","id","delete","editContact","newContact","url","put","Numbers","persons","nameFilter","setPersons","setNotificationMessage","setErrorMessage","console","log","filter","p","name","toLowerCase","includes","map","person","number","onClick","window","confirm","contacts","setTimeout","catch","alert","PersonForm","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","find","n","changedContact","contactObject","error","value","onChange","target","type","NameFilter","nameFilterValue","onNameFilterChanged","Notification","notificationMessage","color","style","border","borderRadius","backgroundColor","margin","fontSize","paddingLeft","App","errorMessage","useEffect","setNameFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12ea04d4.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = \"/api/persons\"\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl).then(response => response.data)\r\n}\r\n\r\nconst add = (contact) => {\r\n    return axios.post(baseUrl, contact).then(response => response.data);\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst editContact = (newContact) => {\r\n    const url = `${baseUrl}/${newContact.id}`\r\n    return axios.put(url, newContact)\r\n}\r\n\r\nconst contactService = {\r\n    getAll, add, deleteContact, editContact\r\n}\r\n\r\nexport default contactService","import React, { useState, useEffect } from 'react'\nimport contactService from \"./services/contacts\"\n\nconst Numbers = ({ persons, nameFilter, setPersons, setNotificationMessage, setErrorMessage }) => {\n  const askDeleteContact = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      contactService.deleteContact(id)\n        .then(() => {\n          contactService.getAll().then(contacts => {\n            setPersons(contacts)\n          })\n\n          setNotificationMessage(`Deleted contact '${name}'`)\n          setTimeout(() => { setNotificationMessage(null) }, 5000)\n        })\n        .catch(() => {\n          alert(\"The contact was already deleted on the server.\")\n          setErrorMessage(`'${name}' was already deleted on the server`)\n          setTimeout(() => { setErrorMessage(null) }, 5000)\n          setPersons(persons.filter(p => p.id !== id))\n        })\n    }\n  }\n\n  console.log(persons)\n  return (\n    persons.filter(p => p.name.toLowerCase().includes(nameFilter)).map(person => {\n      return (\n        <div key={person.name}>\n          <p>{person.name} {person.number}</p>\n          <button onClick={() => askDeleteContact(person.id, person.name)}>delete</button>\n        </div>\n      )\n    })\n  )\n}\n\nconst PersonForm = ({ persons, setPersons, setNotificationMessage, setErrorMessage }) => {\n\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n\n  const onNameChanged = (event) => setNewName(event.target.value)\n  const onNumberChanged = (event) => setNewNumber(event.target.value)\n\n  const onFormSubmit = (event) => {\n    event.preventDefault()\n\n    const person = persons.find(p => p.name === newName)\n    if (person) {\n      if (window.confirm(`${person.name} is already added to the phonebook, replace the old number with the new one?`)) {\n        const contact = persons.find(n => n.id === person.id)\n        const changedContact = { ...contact, number: newNumber }\n\n        contactService.editContact(changedContact).then(response => {\n          setPersons(persons.map(p => p.id !== person.id ? p : response.data))\n        })\n\n        setNotificationMessage(`Updated the phone number of '${person.name}'`)\n        setTimeout(() => { setNotificationMessage(null) }, 5000)\n      }\n    }\n    else {\n      const contactObject = { name: newName, number: newNumber }\n      contactService.add(contactObject).then(newContact => {\n        console.log(newContact)\n        setPersons([...persons, newContact])\n        setNotificationMessage(`Added contact '${newName}'`)\n        setTimeout(() => { setNotificationMessage(null) }, 5000)\n      }).catch(error => {\n        setErrorMessage(error.response.data.error)\n        setTimeout(() => { setErrorMessage(null) }, 5000)\n      })\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <div>name: <input value={newName} onChange={onNameChanged} /></div>\n      <div>number: <input value={newNumber} onChange={onNumberChanged} /></div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst NameFilter = ({ nameFilterValue, onNameFilterChanged }) => {\n  return <div>filter shown with: <input value={nameFilterValue} onChange={onNameFilterChanged} /></div>\n}\n\nconst Notification = ({ notificationMessage, color }) => {\n  if (notificationMessage === null)\n    return null;\n\n  return (\n    <div style={{\n      border: `5px solid ${color}`,\n      borderRadius: \"8px\",\n      backgroundColor: \"lightgray\",\n      margin: \"15px auto\",\n      fontSize: \"20px\",\n      paddingLeft: \"15px\",\n      color: color,\n    }}>\n      <p>{notificationMessage}</p>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    contactService.getAll().then(contacts => {\n      console.log(contacts)\n      setPersons(contacts)\n    })\n  }, [])\n\n  const [nameFilter, setNameFilter] = useState('')\n  const onNameFilterChanged = (event) => setNameFilter(event.target.value)\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notificationMessage={notificationMessage} color=\"green\" />\n      <Notification notificationMessage={errorMessage} color=\"red\" />\n      <NameFilter nameFilterValue={nameFilter} onNameFilterChanged={onNameFilterChanged} />\n\n      <h3>Add a new contact</h3>\n      <PersonForm persons={persons} setPersons={setPersons} setNotificationMessage={setNotificationMessage} setErrorMessage={setErrorMessage}/>\n\n      <h3>Numbers</h3>\n      <Numbers persons={persons} nameFilter={nameFilter} setPersons={setPersons} setErrorMessage={setErrorMessage} setNotificationMessage={setNotificationMessage} />\n\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}